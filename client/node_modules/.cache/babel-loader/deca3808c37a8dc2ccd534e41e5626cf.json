{"ast":null,"code":"// Load planets and return as JSON.\nasync function httpGetPlanets() {\n  const response = await fetch(\"http://localhost:4000/planets\");\n  const planets = await response.json();\n  return planets;\n} // Load launches, sort by flight number, and return as JSON.\n\n\nasync function httpGetLaunches() {\n  const response = await fetch(\"http://localhost:4000/launches\");\n  const launches = await response.json();\n  return launches.sort((a, b) => {});\n}\n\nasync function httpSubmitLaunch(launch) {// TODO: Once API is ready.\n  // Submit given launch data to launch system.\n}\n\nasync function httpAbortLaunch(id) {// TODO: Once API is ready.\n  // Delete launch with given ID.\n}\n\nexport { httpGetPlanets, httpGetLaunches, httpSubmitLaunch, httpAbortLaunch };","map":{"version":3,"sources":["C:/Users/muham/OneDrive/Documents/UMG/GigaNode Course/nasa-project/client/src/hooks/requests.js"],"names":["httpGetPlanets","response","fetch","planets","json","httpGetLaunches","launches","sort","a","b","httpSubmitLaunch","launch","httpAbortLaunch","id"],"mappings":"AAAA;AACA,eAAeA,cAAf,GAAgC;AAC9B,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAAD,CAA5B;AACA,QAAMC,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAtB;AACA,SAAOD,OAAP;AACD,C,CAED;;;AACA,eAAeE,eAAf,GAAiC;AAC/B,QAAMJ,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAD,CAA5B;AACA,QAAMI,QAAQ,GAAG,MAAML,QAAQ,CAACG,IAAT,EAAvB;AACA,SAAOE,QAAQ,CAACC,IAAT,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAAU,CAAE,CAA1B,CAAP;AACD;;AAED,eAAeC,gBAAf,CAAgCC,MAAhC,EAAwC,CACtC;AACA;AACD;;AAED,eAAeC,eAAf,CAA+BC,EAA/B,EAAmC,CACjC;AACA;AACD;;AAED,SAAQb,cAAR,EAAwBK,eAAxB,EAAyCK,gBAAzC,EAA2DE,eAA3D","sourcesContent":["// Load planets and return as JSON.\nasync function httpGetPlanets() {\n  const response = await fetch(\"http://localhost:4000/planets\")\n  const planets = await response.json()\n  return planets\n}\n\n// Load launches, sort by flight number, and return as JSON.\nasync function httpGetLaunches() {\n  const response = await fetch(\"http://localhost:4000/launches\")\n  const launches = await response.json()\n  return launches.sort((a, b) => {})\n}\n\nasync function httpSubmitLaunch(launch) {\n  // TODO: Once API is ready.\n  // Submit given launch data to launch system.\n}\n\nasync function httpAbortLaunch(id) {\n  // TODO: Once API is ready.\n  // Delete launch with given ID.\n}\n\nexport {httpGetPlanets, httpGetLaunches, httpSubmitLaunch, httpAbortLaunch}\n"]},"metadata":{},"sourceType":"module"}