{"ast":null,"code":"import _asyncToGenerator from\"C:/Users/muham/OneDrive/Documents/UMG/GigaNode Course/nasa-project/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"C:\\\\Users\\\\muham\\\\OneDrive\\\\Documents\\\\UMG\\\\GigaNode Course\\\\nasa-project\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";function httpGetPlanets(){return _httpGetPlanets.apply(this,arguments);}// Load launches, sort by flight number, and return as JSON.\nfunction _httpGetPlanets(){_httpGetPlanets=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response,_yield$response$json,planets;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"http://localhost:4000/planets\");case 2:response=_context.sent;_context.next=5;return response.json();case 5:_yield$response$json=_context.sent;planets=_yield$response$json.planets;return _context.abrupt(\"return\",planets);case 8:case\"end\":return _context.stop();}}},_callee);}));return _httpGetPlanets.apply(this,arguments);}function httpGetLaunches(){return _httpGetLaunches.apply(this,arguments);}function _httpGetLaunches(){_httpGetLaunches=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var response,fetchedLaunches;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return fetch(\"http://localhost:4000/launches\");case 2:response=_context2.sent;_context2.next=5;return response.json();case 5:fetchedLaunches=_context2.sent;return _context2.abrupt(\"return\",fetchedLaunches.sort(function(a,b){return a.flightNumber-b.flightNumber;}));case 7:case\"end\":return _context2.stop();}}},_callee2);}));return _httpGetLaunches.apply(this,arguments);}function httpSubmitLaunch(_x){return _httpSubmitLaunch.apply(this,arguments);}function _httpSubmitLaunch(){_httpSubmitLaunch=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(launch){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:case\"end\":return _context3.stop();}}},_callee3);}));return _httpSubmitLaunch.apply(this,arguments);}function httpAbortLaunch(_x2){return _httpAbortLaunch.apply(this,arguments);}function _httpAbortLaunch(){_httpAbortLaunch=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(id){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:case\"end\":return _context4.stop();}}},_callee4);}));return _httpAbortLaunch.apply(this,arguments);}export{httpGetPlanets,httpGetLaunches,httpSubmitLaunch,httpAbortLaunch};","map":{"version":3,"sources":["C:/Users/muham/OneDrive/Documents/UMG/GigaNode Course/nasa-project/client/src/hooks/requests.js"],"names":["httpGetPlanets","fetch","response","json","planets","httpGetLaunches","fetchedLaunches","sort","a","b","flightNumber","httpSubmitLaunch","launch","httpAbortLaunch","id"],"mappings":"sVAAeA,CAAAA,c,iDAMf;mGANA,mMACyBC,CAAAA,KAAK,CAAC,+BAAD,CAD9B,QACQC,QADR,qCAE0BA,CAAAA,QAAQ,CAACC,IAAT,EAF1B,2CAESC,OAFT,sBAESA,OAFT,iCAGSA,OAHT,wD,yDAOeC,CAAAA,e,uJAAf,4LACyBJ,CAAAA,KAAK,CAAC,gCAAD,CAD9B,QACQC,QADR,uCAEgCA,CAAAA,QAAQ,CAACC,IAAT,EAFhC,QAEQG,eAFR,iDAGSA,eAAe,CAACC,IAAhB,CAAqB,SAACC,CAAD,CAAIC,CAAJ,CAAU,CACpC,MAAOD,CAAAA,CAAC,CAACE,YAAF,CAAiBD,CAAC,CAACC,YAA1B,CACD,CAFM,CAHT,0D,0DAQeC,CAAAA,gB,4JAAf,kBAAgCC,MAAhC,uK,2DAKeC,CAAAA,e,0JAAf,kBAA+BC,EAA/B,uK,kDAKA,OAAQd,cAAR,CAAwBK,eAAxB,CAAyCM,gBAAzC,CAA2DE,eAA3D","sourcesContent":["async function httpGetPlanets() {\n  const response = await fetch(\"http://localhost:4000/planets\")\n  const {planets} = await response.json()\n  return planets\n}\n\n// Load launches, sort by flight number, and return as JSON.\nasync function httpGetLaunches() {\n  const response = await fetch(\"http://localhost:4000/launches\")\n  const fetchedLaunches = await response.json()\n  return fetchedLaunches.sort((a, b) => {\n    return a.flightNumber - b.flightNumber\n  })\n}\n\nasync function httpSubmitLaunch(launch) {\n  // TODO: Once API is ready.\n  // Submit given launch data to launch system.\n}\n\nasync function httpAbortLaunch(id) {\n  // TODO: Once API is ready.\n  // Delete launch with given ID.\n}\n\nexport {httpGetPlanets, httpGetLaunches, httpSubmitLaunch, httpAbortLaunch}\n"]},"metadata":{},"sourceType":"module"}